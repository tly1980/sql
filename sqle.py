#!/usr/bin/env python
import argparse
import logging
import os


AP = argparse.ArgumentParser(description="Simple SQL template render")
AP.add_argument('src', nargs='+')
AP.add_argument('-x', nargs='+', type=str, default=[], help='''Specify the template variables.
    Please put it as "-x a=AAA b=BBB c=CCC"''')


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(name)-2s %(levelname)-2s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')
# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)

HEADER='''---------------------------------------------------------
-- generated by sqle (https://github.com/tly1980/sqle) --
---------------------------------------------------------'''


class SQLRender(object):
    def __init__(self, srcs, params):
        self.srcs = srcs
        self.params = params

    def next_stmt(self):
        for s in self.srcs:
            for stmt in self.load(s):
                yield stmt

    def load(self, src):
        if os.path.exists(src):
            # this means src could be either a file or directory
            if not os.path.isdir(src):
                for stmt in x_file(src, self.params):
                    yield (stmt, src)
            else:
                for root, dirs, files in os.walk(src):
                    for f in sorted(files):
                        path = os.path.join(root, f)
                        yield x_file(path, self.params), path

        else:
            stmt = src.format(**self.params)
            if not stmt.endswith(';'):
                stmt += ';'
            yield stmt, '<FROM ARGS>'


def x_file(src_file, params):
    with open(src_file) as f:
        cnt = f.read().format(**params)
        cnt = cnt.strip()
        return cnt


def x_params(x_pairs):
    return dict([ x.split('=') for x in x_pairs])


def main(args):
    params = x_params(args.x)

    render = SQLRender(args.src, params)

    print HEADER
    print "-- with xargs: %s\n" % '; '.join(args.x)

    for idx, stmt in enumerate(render.next_stmt()):
        print '-- sql_%s from: %s' % (idx + 1, stmt[1])
        print stmt[0]
        print ''


if __name__ == '__main__':
    main(AP.parse_args())